// Generated by gencpp from file mpc/MincoTraj.msg
// DO NOT EDIT!


#ifndef MPC_MESSAGE_MINCOTRAJ_H
#define MPC_MESSAGE_MINCOTRAJ_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mpc/SingleMinco.h>

namespace mpc
{
template <class ContainerAllocator>
struct MincoTraj_
{
  typedef MincoTraj_<ContainerAllocator> Type;

  MincoTraj_()
    : trajs()  {
    }
  MincoTraj_(const ContainerAllocator& _alloc)
    : trajs(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::mpc::SingleMinco_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::mpc::SingleMinco_<ContainerAllocator> >> _trajs_type;
  _trajs_type trajs;





  typedef boost::shared_ptr< ::mpc::MincoTraj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mpc::MincoTraj_<ContainerAllocator> const> ConstPtr;

}; // struct MincoTraj_

typedef ::mpc::MincoTraj_<std::allocator<void> > MincoTraj;

typedef boost::shared_ptr< ::mpc::MincoTraj > MincoTrajPtr;
typedef boost::shared_ptr< ::mpc::MincoTraj const> MincoTrajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mpc::MincoTraj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mpc::MincoTraj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mpc::MincoTraj_<ContainerAllocator1> & lhs, const ::mpc::MincoTraj_<ContainerAllocator2> & rhs)
{
  return lhs.trajs == rhs.trajs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mpc::MincoTraj_<ContainerAllocator1> & lhs, const ::mpc::MincoTraj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mpc::MincoTraj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc::MincoTraj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc::MincoTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc::MincoTraj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc::MincoTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc::MincoTraj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mpc::MincoTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ff38f9ec96015af6757a6ba5d0c914b";
  }

  static const char* value(const ::mpc::MincoTraj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ff38f9ec96015afULL;
  static const uint64_t static_value2 = 0x6757a6ba5d0c914bULL;
};

template<class ContainerAllocator>
struct DataType< ::mpc::MincoTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mpc/MincoTraj";
  }

  static const char* value(const ::mpc::MincoTraj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mpc::MincoTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mpc/SingleMinco[] trajs\n"
"================================================================================\n"
"MSG: mpc/SingleMinco\n"
"time start_time\n"
"\n"
"geometry_msgs/Vector3 head_x\n"
"geometry_msgs/Vector3 head_y\n"
"geometry_msgs/Vector3 tail_x\n"
"geometry_msgs/Vector3 tail_y\n"
"\n"
"geometry_msgs/Point[] pos_pts\n"
"\n"
"float64[] t_pts\n"
"\n"
"bool reverse\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mpc::MincoTraj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mpc::MincoTraj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trajs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MincoTraj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mpc::MincoTraj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mpc::MincoTraj_<ContainerAllocator>& v)
  {
    s << indent << "trajs[]" << std::endl;
    for (size_t i = 0; i < v.trajs.size(); ++i)
    {
      s << indent << "  trajs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mpc::SingleMinco_<ContainerAllocator> >::stream(s, indent + "    ", v.trajs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MPC_MESSAGE_MINCOTRAJ_H
