// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Trajectory.proto

#include "Trajectory.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MincoTraj_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MincoTraj_MincoTraj_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nav_5fpath_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Nav_path_nav_5fpath_2eproto;
namespace apollo {
namespace shenlan {
namespace mpc {
class TrajectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trajectory> _instance;
} _Trajectory_default_instance_;
}  // namespace mpc
}  // namespace shenlan
}  // namespace apollo
static void InitDefaultsscc_info_Trajectory_Trajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::shenlan::mpc::_Trajectory_default_instance_;
    new (ptr) ::apollo::shenlan::mpc::Trajectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::shenlan::mpc::Trajectory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Trajectory_Trajectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Trajectory_Trajectory_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_Nav_path_nav_5fpath_2eproto.base,
      &scc_info_MincoTraj_MincoTraj_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Trajectory_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Trajectory_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Trajectory_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Trajectory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::Trajectory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::Trajectory, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::Trajectory, traj_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::Trajectory, nav_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::Trajectory, minco_path_),
  0,
  3,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::shenlan::mpc::Trajectory)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::shenlan::mpc::_Trajectory_default_instance_),
};

const char descriptor_table_protodef_Trajectory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020Trajectory.proto\022\022apollo.shenlan.mpc\032\014"
  "header.proto\032\017MincoTraj.proto\032\016nav_path."
  "proto\"\254\001\n\nTrajectory\022%\n\006header\030\001 \001(\0132\025.a"
  "pollo.common.Header\022\024\n\ttraj_type\030\002 \001(\005:\001"
  "1\022.\n\010nav_path\030\003 \001(\0132\034.apollo.shenlan.mpc"
  ".Nav_path\0221\n\nminco_path\030\004 \001(\0132\035.apollo.s"
  "henlan.mpc.MincoTraj"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Trajectory_2eproto_deps[3] = {
  &::descriptor_table_MincoTraj_2eproto,
  &::descriptor_table_header_2eproto,
  &::descriptor_table_nav_5fpath_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Trajectory_2eproto_sccs[1] = {
  &scc_info_Trajectory_Trajectory_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Trajectory_2eproto_once;
static bool descriptor_table_Trajectory_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Trajectory_2eproto = {
  &descriptor_table_Trajectory_2eproto_initialized, descriptor_table_protodef_Trajectory_2eproto, "Trajectory.proto", 260,
  &descriptor_table_Trajectory_2eproto_once, descriptor_table_Trajectory_2eproto_sccs, descriptor_table_Trajectory_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_Trajectory_2eproto::offsets,
  file_level_metadata_Trajectory_2eproto, 1, file_level_enum_descriptors_Trajectory_2eproto, file_level_service_descriptors_Trajectory_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Trajectory_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Trajectory_2eproto), true);
namespace apollo {
namespace shenlan {
namespace mpc {

// ===================================================================

void Trajectory::InitAsDefaultInstance() {
  ::apollo::shenlan::mpc::_Trajectory_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::shenlan::mpc::_Trajectory_default_instance_._instance.get_mutable()->nav_path_ = const_cast< ::apollo::shenlan::mpc::Nav_path*>(
      ::apollo::shenlan::mpc::Nav_path::internal_default_instance());
  ::apollo::shenlan::mpc::_Trajectory_default_instance_._instance.get_mutable()->minco_path_ = const_cast< ::apollo::shenlan::mpc::MincoTraj*>(
      ::apollo::shenlan::mpc::MincoTraj::internal_default_instance());
}
class Trajectory::_Internal {
 public:
  using HasBits = decltype(std::declval<Trajectory>()._has_bits_);
  static const ::apollo::common::Header& header(const Trajectory* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_traj_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::shenlan::mpc::Nav_path& nav_path(const Trajectory* msg);
  static void set_has_nav_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::shenlan::mpc::MincoTraj& minco_path(const Trajectory* msg);
  static void set_has_minco_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::Header&
Trajectory::_Internal::header(const Trajectory* msg) {
  return *msg->header_;
}
const ::apollo::shenlan::mpc::Nav_path&
Trajectory::_Internal::nav_path(const Trajectory* msg) {
  return *msg->nav_path_;
}
const ::apollo::shenlan::mpc::MincoTraj&
Trajectory::_Internal::minco_path(const Trajectory* msg) {
  return *msg->minco_path_;
}
void Trajectory::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Trajectory::clear_nav_path() {
  if (nav_path_ != nullptr) nav_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Trajectory::clear_minco_path() {
  if (minco_path_ != nullptr) minco_path_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Trajectory::Trajectory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.shenlan.mpc.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_nav_path()) {
    nav_path_ = new ::apollo::shenlan::mpc::Nav_path(*from.nav_path_);
  } else {
    nav_path_ = nullptr;
  }
  if (from._internal_has_minco_path()) {
    minco_path_ = new ::apollo::shenlan::mpc::MincoTraj(*from.minco_path_);
  } else {
    minco_path_ = nullptr;
  }
  traj_type_ = from.traj_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.shenlan.mpc.Trajectory)
}

void Trajectory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trajectory_Trajectory_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minco_path_) -
      reinterpret_cast<char*>(&header_)) + sizeof(minco_path_));
  traj_type_ = 1;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:apollo.shenlan.mpc.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete nav_path_;
  if (this != internal_default_instance()) delete minco_path_;
}

void Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trajectory& Trajectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trajectory_Trajectory_2eproto.base);
  return *internal_default_instance();
}


void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.shenlan.mpc.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(nav_path_ != nullptr);
      nav_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(minco_path_ != nullptr);
      minco_path_->Clear();
    }
    traj_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Trajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 traj_type = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_traj_type(&has_bits);
          traj_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.shenlan.mpc.Nav_path nav_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nav_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.shenlan.mpc.MincoTraj minco_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_minco_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.shenlan.mpc.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // optional int32 traj_type = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_traj_type(), target);
  }

  // optional .apollo.shenlan.mpc.Nav_path nav_path = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::nav_path(this), target, stream);
  }

  // optional .apollo.shenlan.mpc.MincoTraj minco_path = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::minco_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.shenlan.mpc.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.shenlan.mpc.Trajectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.shenlan.mpc.Nav_path nav_path = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nav_path_);
    }

    // optional .apollo.shenlan.mpc.MincoTraj minco_path = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *minco_path_);
    }

    // optional int32 traj_type = 2 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_traj_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.shenlan.mpc.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.shenlan.mpc.Trajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.shenlan.mpc.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.shenlan.mpc.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_nav_path()->::apollo::shenlan::mpc::Nav_path::MergeFrom(from._internal_nav_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_minco_path()->::apollo::shenlan::mpc::MincoTraj::MergeFrom(from._internal_minco_path());
    }
    if (cached_has_bits & 0x00000008u) {
      traj_type_ = from.traj_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Trajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.shenlan.mpc.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.shenlan.mpc.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(nav_path_, other->nav_path_);
  swap(minco_path_, other->minco_path_);
  swap(traj_type_, other->traj_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mpc
}  // namespace shenlan
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::shenlan::mpc::Trajectory* Arena::CreateMaybeMessage< ::apollo::shenlan::mpc::Trajectory >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::shenlan::mpc::Trajectory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
