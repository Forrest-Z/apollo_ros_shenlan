// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SingleMinco.proto

#include "SingleMinco.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_geometry_2eproto;
namespace apollo {
namespace shenlan {
namespace mpc {
class SingleMincoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleMinco> _instance;
} _SingleMinco_default_instance_;
}  // namespace mpc
}  // namespace shenlan
}  // namespace apollo
static void InitDefaultsscc_info_SingleMinco_SingleMinco_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::shenlan::mpc::_SingleMinco_default_instance_;
    new (ptr) ::apollo::shenlan::mpc::SingleMinco();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::shenlan::mpc::SingleMinco::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleMinco_SingleMinco_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SingleMinco_SingleMinco_2eproto}, {
      &scc_info_Point3D_geometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SingleMinco_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SingleMinco_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SingleMinco_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SingleMinco_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::SingleMinco, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::SingleMinco, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::SingleMinco, start_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::SingleMinco, head_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::SingleMinco, head_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::SingleMinco, tail_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::SingleMinco, tail_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::SingleMinco, pos_pts_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::SingleMinco, t_pts_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::SingleMinco, reverse_),
  4,
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::apollo::shenlan::mpc::SingleMinco)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::shenlan::mpc::_SingleMinco_default_instance_),
};

const char descriptor_table_protodef_SingleMinco_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021SingleMinco.proto\022\022apollo.shenlan.mpc\032"
  "\016geometry.proto\"\212\002\n\013SingleMinco\022\022\n\nstart"
  "_time\030\001 \001(\001\022&\n\006head_x\030\002 \001(\0132\026.apollo.com"
  "mon.Point3D\022&\n\006head_y\030\003 \001(\0132\026.apollo.com"
  "mon.Point3D\022&\n\006tail_x\030\004 \001(\0132\026.apollo.com"
  "mon.Point3D\022&\n\006tail_y\030\005 \001(\0132\026.apollo.com"
  "mon.Point3D\022\'\n\007pos_pts\030\006 \003(\0132\026.apollo.co"
  "mmon.Point3D\022\r\n\005t_pts\030\007 \003(\001\022\017\n\007reverse\030\010"
  " \001(\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SingleMinco_2eproto_deps[1] = {
  &::descriptor_table_geometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SingleMinco_2eproto_sccs[1] = {
  &scc_info_SingleMinco_SingleMinco_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SingleMinco_2eproto_once;
static bool descriptor_table_SingleMinco_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SingleMinco_2eproto = {
  &descriptor_table_SingleMinco_2eproto_initialized, descriptor_table_protodef_SingleMinco_2eproto, "SingleMinco.proto", 324,
  &descriptor_table_SingleMinco_2eproto_once, descriptor_table_SingleMinco_2eproto_sccs, descriptor_table_SingleMinco_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_SingleMinco_2eproto::offsets,
  file_level_metadata_SingleMinco_2eproto, 1, file_level_enum_descriptors_SingleMinco_2eproto, file_level_service_descriptors_SingleMinco_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SingleMinco_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SingleMinco_2eproto), true);
namespace apollo {
namespace shenlan {
namespace mpc {

// ===================================================================

void SingleMinco::InitAsDefaultInstance() {
  ::apollo::shenlan::mpc::_SingleMinco_default_instance_._instance.get_mutable()->head_x_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::shenlan::mpc::_SingleMinco_default_instance_._instance.get_mutable()->head_y_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::shenlan::mpc::_SingleMinco_default_instance_._instance.get_mutable()->tail_x_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::shenlan::mpc::_SingleMinco_default_instance_._instance.get_mutable()->tail_y_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
}
class SingleMinco::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleMinco>()._has_bits_);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::Point3D& head_x(const SingleMinco* msg);
  static void set_has_head_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::Point3D& head_y(const SingleMinco* msg);
  static void set_has_head_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point3D& tail_x(const SingleMinco* msg);
  static void set_has_tail_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::Point3D& tail_y(const SingleMinco* msg);
  static void set_has_tail_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reverse(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::common::Point3D&
SingleMinco::_Internal::head_x(const SingleMinco* msg) {
  return *msg->head_x_;
}
const ::apollo::common::Point3D&
SingleMinco::_Internal::head_y(const SingleMinco* msg) {
  return *msg->head_y_;
}
const ::apollo::common::Point3D&
SingleMinco::_Internal::tail_x(const SingleMinco* msg) {
  return *msg->tail_x_;
}
const ::apollo::common::Point3D&
SingleMinco::_Internal::tail_y(const SingleMinco* msg) {
  return *msg->tail_y_;
}
void SingleMinco::clear_head_x() {
  if (head_x_ != nullptr) head_x_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SingleMinco::clear_head_y() {
  if (head_y_ != nullptr) head_y_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SingleMinco::clear_tail_x() {
  if (tail_x_ != nullptr) tail_x_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SingleMinco::clear_tail_y() {
  if (tail_y_ != nullptr) tail_y_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SingleMinco::clear_pos_pts() {
  pos_pts_.Clear();
}
SingleMinco::SingleMinco()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.shenlan.mpc.SingleMinco)
}
SingleMinco::SingleMinco(const SingleMinco& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pos_pts_(from.pos_pts_),
      t_pts_(from.t_pts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_head_x()) {
    head_x_ = new ::apollo::common::Point3D(*from.head_x_);
  } else {
    head_x_ = nullptr;
  }
  if (from._internal_has_head_y()) {
    head_y_ = new ::apollo::common::Point3D(*from.head_y_);
  } else {
    head_y_ = nullptr;
  }
  if (from._internal_has_tail_x()) {
    tail_x_ = new ::apollo::common::Point3D(*from.tail_x_);
  } else {
    tail_x_ = nullptr;
  }
  if (from._internal_has_tail_y()) {
    tail_y_ = new ::apollo::common::Point3D(*from.tail_y_);
  } else {
    tail_y_ = nullptr;
  }
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(reverse_));
  // @@protoc_insertion_point(copy_constructor:apollo.shenlan.mpc.SingleMinco)
}

void SingleMinco::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleMinco_SingleMinco_2eproto.base);
  ::memset(&head_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_) -
      reinterpret_cast<char*>(&head_x_)) + sizeof(reverse_));
}

SingleMinco::~SingleMinco() {
  // @@protoc_insertion_point(destructor:apollo.shenlan.mpc.SingleMinco)
  SharedDtor();
}

void SingleMinco::SharedDtor() {
  if (this != internal_default_instance()) delete head_x_;
  if (this != internal_default_instance()) delete head_y_;
  if (this != internal_default_instance()) delete tail_x_;
  if (this != internal_default_instance()) delete tail_y_;
}

void SingleMinco::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleMinco& SingleMinco::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleMinco_SingleMinco_2eproto.base);
  return *internal_default_instance();
}


void SingleMinco::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.shenlan.mpc.SingleMinco)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pos_pts_.Clear();
  t_pts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(head_x_ != nullptr);
      head_x_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(head_y_ != nullptr);
      head_y_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tail_x_ != nullptr);
      tail_x_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tail_y_ != nullptr);
      tail_y_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reverse_) -
        reinterpret_cast<char*>(&start_time_)) + sizeof(reverse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SingleMinco::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D head_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_head_x(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D head_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_head_y(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D tail_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail_x(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D tail_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail_y(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.Point3D pos_pts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pos_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated double t_pts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_t_pts(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<57>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_t_pts(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reverse = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_reverse(&has_bits);
          reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleMinco::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.shenlan.mpc.SingleMinco)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_time = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_time(), target);
  }

  // optional .apollo.common.Point3D head_x = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::head_x(this), target, stream);
  }

  // optional .apollo.common.Point3D head_y = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::head_y(this), target, stream);
  }

  // optional .apollo.common.Point3D tail_x = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::tail_x(this), target, stream);
  }

  // optional .apollo.common.Point3D tail_y = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::tail_y(this), target, stream);
  }

  // repeated .apollo.common.Point3D pos_pts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pos_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_pos_pts(i), target, stream);
  }

  // repeated double t_pts = 7;
  for (int i = 0, n = this->_internal_t_pts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_t_pts(i), target);
  }

  // optional bool reverse = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_reverse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.shenlan.mpc.SingleMinco)
  return target;
}

size_t SingleMinco::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.shenlan.mpc.SingleMinco)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.Point3D pos_pts = 6;
  total_size += 1UL * this->_internal_pos_pts_size();
  for (const auto& msg : this->pos_pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double t_pts = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_t_pts_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_t_pts_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.common.Point3D head_x = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *head_x_);
    }

    // optional .apollo.common.Point3D head_y = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *head_y_);
    }

    // optional .apollo.common.Point3D tail_x = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tail_x_);
    }

    // optional .apollo.common.Point3D tail_y = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tail_y_);
    }

    // optional double start_time = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool reverse = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleMinco::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.shenlan.mpc.SingleMinco)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleMinco* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleMinco>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.shenlan.mpc.SingleMinco)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.shenlan.mpc.SingleMinco)
    MergeFrom(*source);
  }
}

void SingleMinco::MergeFrom(const SingleMinco& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.shenlan.mpc.SingleMinco)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pos_pts_.MergeFrom(from.pos_pts_);
  t_pts_.MergeFrom(from.t_pts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_head_x()->::apollo::common::Point3D::MergeFrom(from._internal_head_x());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_head_y()->::apollo::common::Point3D::MergeFrom(from._internal_head_y());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tail_x()->::apollo::common::Point3D::MergeFrom(from._internal_tail_x());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tail_y()->::apollo::common::Point3D::MergeFrom(from._internal_tail_y());
    }
    if (cached_has_bits & 0x00000010u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      reverse_ = from.reverse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SingleMinco::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.shenlan.mpc.SingleMinco)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleMinco::CopyFrom(const SingleMinco& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.shenlan.mpc.SingleMinco)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleMinco::IsInitialized() const {
  return true;
}

void SingleMinco::InternalSwap(SingleMinco* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pos_pts_.InternalSwap(&other->pos_pts_);
  t_pts_.InternalSwap(&other->t_pts_);
  swap(head_x_, other->head_x_);
  swap(head_y_, other->head_y_);
  swap(tail_x_, other->tail_x_);
  swap(tail_y_, other->tail_y_);
  swap(start_time_, other->start_time_);
  swap(reverse_, other->reverse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleMinco::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mpc
}  // namespace shenlan
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::shenlan::mpc::SingleMinco* Arena::CreateMaybeMessage< ::apollo::shenlan::mpc::SingleMinco >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::shenlan::mpc::SingleMinco >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
