// Generated by gencpp from file mpc/Trajectory.msg
// DO NOT EDIT!


#ifndef MPC_MESSAGE_TRAJECTORY_H
#define MPC_MESSAGE_TRAJECTORY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <nav_msgs/Path.h>
#include <mpc/MincoTraj.h>

namespace mpc
{
template <class ContainerAllocator>
struct Trajectory_
{
  typedef Trajectory_<ContainerAllocator> Type;

  Trajectory_()
    : traj_type(0)
    , nav_path()
    , minco_path()  {
    }
  Trajectory_(const ContainerAllocator& _alloc)
    : traj_type(0)
    , nav_path(_alloc)
    , minco_path(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _traj_type_type;
  _traj_type_type traj_type;

   typedef  ::nav_msgs::Path_<ContainerAllocator>  _nav_path_type;
  _nav_path_type nav_path;

   typedef  ::mpc::MincoTraj_<ContainerAllocator>  _minco_path_type;
  _minco_path_type minco_path;





  typedef boost::shared_ptr< ::mpc::Trajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mpc::Trajectory_<ContainerAllocator> const> ConstPtr;

}; // struct Trajectory_

typedef ::mpc::Trajectory_<std::allocator<void> > Trajectory;

typedef boost::shared_ptr< ::mpc::Trajectory > TrajectoryPtr;
typedef boost::shared_ptr< ::mpc::Trajectory const> TrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mpc::Trajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mpc::Trajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mpc::Trajectory_<ContainerAllocator1> & lhs, const ::mpc::Trajectory_<ContainerAllocator2> & rhs)
{
  return lhs.traj_type == rhs.traj_type &&
    lhs.nav_path == rhs.nav_path &&
    lhs.minco_path == rhs.minco_path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mpc::Trajectory_<ContainerAllocator1> & lhs, const ::mpc::Trajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mpc::Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc::Trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc::Trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc::Trajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc::Trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc::Trajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mpc::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0671fde0de6a63c355f6114f79869b4";
  }

  static const char* value(const ::mpc::Trajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0671fde0de6a63cULL;
  static const uint64_t static_value2 = 0x355f6114f79869b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::mpc::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mpc/Trajectory";
  }

  static const char* value(const ::mpc::Trajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mpc::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 traj_type     #0: Test Path,   1: Minco Path\n"
"\n"
"nav_msgs/Path nav_path\n"
"\n"
"mpc/MincoTraj minco_path\n"
"================================================================================\n"
"MSG: nav_msgs/Path\n"
"#An array of poses that represents a Path for a robot to follow\n"
"Header header\n"
"geometry_msgs/PoseStamped[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: mpc/MincoTraj\n"
"mpc/SingleMinco[] trajs\n"
"================================================================================\n"
"MSG: mpc/SingleMinco\n"
"time start_time\n"
"\n"
"geometry_msgs/Vector3 head_x\n"
"geometry_msgs/Vector3 head_y\n"
"geometry_msgs/Vector3 tail_x\n"
"geometry_msgs/Vector3 tail_y\n"
"\n"
"geometry_msgs/Point[] pos_pts\n"
"\n"
"float64[] t_pts\n"
"\n"
"bool reverse\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mpc::Trajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mpc::Trajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.traj_type);
      stream.next(m.nav_path);
      stream.next(m.minco_path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Trajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mpc::Trajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mpc::Trajectory_<ContainerAllocator>& v)
  {
    s << indent << "traj_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.traj_type);
    s << indent << "nav_path: ";
    s << std::endl;
    Printer< ::nav_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.nav_path);
    s << indent << "minco_path: ";
    s << std::endl;
    Printer< ::mpc::MincoTraj_<ContainerAllocator> >::stream(s, indent + "  ", v.minco_path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MPC_MESSAGE_TRAJECTORY_H
