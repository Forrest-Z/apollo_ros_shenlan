// Generated by gencpp from file mpc/SingleMinco.msg
// DO NOT EDIT!


#ifndef MPC_MESSAGE_SINGLEMINCO_H
#define MPC_MESSAGE_SINGLEMINCO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>

namespace mpc
{
template <class ContainerAllocator>
struct SingleMinco_
{
  typedef SingleMinco_<ContainerAllocator> Type;

  SingleMinco_()
    : start_time()
    , head_x()
    , head_y()
    , tail_x()
    , tail_y()
    , pos_pts()
    , t_pts()
    , reverse(false)  {
    }
  SingleMinco_(const ContainerAllocator& _alloc)
    : start_time()
    , head_x(_alloc)
    , head_y(_alloc)
    , tail_x(_alloc)
    , tail_y(_alloc)
    , pos_pts(_alloc)
    , t_pts(_alloc)
    , reverse(false)  {
  (void)_alloc;
    }



   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _head_x_type;
  _head_x_type head_x;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _head_y_type;
  _head_y_type head_y;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _tail_x_type;
  _tail_x_type tail_x;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _tail_y_type;
  _tail_y_type tail_y;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _pos_pts_type;
  _pos_pts_type pos_pts;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _t_pts_type;
  _t_pts_type t_pts;

   typedef uint8_t _reverse_type;
  _reverse_type reverse;





  typedef boost::shared_ptr< ::mpc::SingleMinco_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mpc::SingleMinco_<ContainerAllocator> const> ConstPtr;

}; // struct SingleMinco_

typedef ::mpc::SingleMinco_<std::allocator<void> > SingleMinco;

typedef boost::shared_ptr< ::mpc::SingleMinco > SingleMincoPtr;
typedef boost::shared_ptr< ::mpc::SingleMinco const> SingleMincoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mpc::SingleMinco_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mpc::SingleMinco_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mpc::SingleMinco_<ContainerAllocator1> & lhs, const ::mpc::SingleMinco_<ContainerAllocator2> & rhs)
{
  return lhs.start_time == rhs.start_time &&
    lhs.head_x == rhs.head_x &&
    lhs.head_y == rhs.head_y &&
    lhs.tail_x == rhs.tail_x &&
    lhs.tail_y == rhs.tail_y &&
    lhs.pos_pts == rhs.pos_pts &&
    lhs.t_pts == rhs.t_pts &&
    lhs.reverse == rhs.reverse;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mpc::SingleMinco_<ContainerAllocator1> & lhs, const ::mpc::SingleMinco_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mpc::SingleMinco_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc::SingleMinco_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc::SingleMinco_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc::SingleMinco_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc::SingleMinco_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc::SingleMinco_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mpc::SingleMinco_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9787bac3b70c3fb6c65b3beb8fbcf12f";
  }

  static const char* value(const ::mpc::SingleMinco_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9787bac3b70c3fb6ULL;
  static const uint64_t static_value2 = 0xc65b3beb8fbcf12fULL;
};

template<class ContainerAllocator>
struct DataType< ::mpc::SingleMinco_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mpc/SingleMinco";
  }

  static const char* value(const ::mpc::SingleMinco_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mpc::SingleMinco_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time start_time\n"
"\n"
"geometry_msgs/Vector3 head_x\n"
"geometry_msgs/Vector3 head_y\n"
"geometry_msgs/Vector3 tail_x\n"
"geometry_msgs/Vector3 tail_y\n"
"\n"
"geometry_msgs/Point[] pos_pts\n"
"\n"
"float64[] t_pts\n"
"\n"
"bool reverse\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mpc::SingleMinco_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mpc::SingleMinco_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_time);
      stream.next(m.head_x);
      stream.next(m.head_y);
      stream.next(m.tail_x);
      stream.next(m.tail_y);
      stream.next(m.pos_pts);
      stream.next(m.t_pts);
      stream.next(m.reverse);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SingleMinco_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mpc::SingleMinco_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mpc::SingleMinco_<ContainerAllocator>& v)
  {
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "head_x: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.head_x);
    s << indent << "head_y: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.head_y);
    s << indent << "tail_x: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.tail_x);
    s << indent << "tail_y: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.tail_y);
    s << indent << "pos_pts[]" << std::endl;
    for (size_t i = 0; i < v.pos_pts.size(); ++i)
    {
      s << indent << "  pos_pts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.pos_pts[i]);
    }
    s << indent << "t_pts[]" << std::endl;
    for (size_t i = 0; i < v.t_pts.size(); ++i)
    {
      s << indent << "  t_pts[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.t_pts[i]);
    }
    s << indent << "reverse: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reverse);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MPC_MESSAGE_SINGLEMINCO_H
