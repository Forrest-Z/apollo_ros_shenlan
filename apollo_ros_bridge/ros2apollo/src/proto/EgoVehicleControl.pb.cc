// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EgoVehicleControl.proto

#include "EgoVehicleControl.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_header_2eproto;
namespace apollo {
namespace shenlan {
namespace mpc {
class EgoVehicleControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EgoVehicleControl> _instance;
} _EgoVehicleControl_default_instance_;
}  // namespace mpc
}  // namespace shenlan
}  // namespace apollo
static void InitDefaultsscc_info_EgoVehicleControl_EgoVehicleControl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::shenlan::mpc::_EgoVehicleControl_default_instance_;
    new (ptr) ::apollo::shenlan::mpc::EgoVehicleControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::shenlan::mpc::EgoVehicleControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EgoVehicleControl_EgoVehicleControl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EgoVehicleControl_EgoVehicleControl_2eproto}, {
      &scc_info_Header_header_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_EgoVehicleControl_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_EgoVehicleControl_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_EgoVehicleControl_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_EgoVehicleControl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleControl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleControl, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleControl, throttle_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleControl, steer_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleControl, brake_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleControl, hand_brake_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleControl, reverse_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleControl, gear_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleControl, manual_gear_shift_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::apollo::shenlan::mpc::EgoVehicleControl)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::shenlan::mpc::_EgoVehicleControl_default_instance_),
};

const char descriptor_table_protodef_EgoVehicleControl_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027EgoVehicleControl.proto\022\022apollo.shenla"
  "n.mpc\032\014header.proto\"\270\001\n\021EgoVehicleContro"
  "l\022%\n\006header\030\001 \001(\0132\025.apollo.common.Header"
  "\022\020\n\010throttle\030\002 \001(\002\022\r\n\005steer\030\003 \001(\002\022\r\n\005bra"
  "ke\030\004 \001(\002\022\022\n\nhand_brake\030\005 \001(\010\022\017\n\007reverse\030"
  "\006 \001(\010\022\014\n\004gear\030\007 \001(\005\022\031\n\021manual_gear_shift"
  "\030\010 \001(\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_EgoVehicleControl_2eproto_deps[1] = {
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_EgoVehicleControl_2eproto_sccs[1] = {
  &scc_info_EgoVehicleControl_EgoVehicleControl_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_EgoVehicleControl_2eproto_once;
static bool descriptor_table_EgoVehicleControl_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EgoVehicleControl_2eproto = {
  &descriptor_table_EgoVehicleControl_2eproto_initialized, descriptor_table_protodef_EgoVehicleControl_2eproto, "EgoVehicleControl.proto", 246,
  &descriptor_table_EgoVehicleControl_2eproto_once, descriptor_table_EgoVehicleControl_2eproto_sccs, descriptor_table_EgoVehicleControl_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_EgoVehicleControl_2eproto::offsets,
  file_level_metadata_EgoVehicleControl_2eproto, 1, file_level_enum_descriptors_EgoVehicleControl_2eproto, file_level_service_descriptors_EgoVehicleControl_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_EgoVehicleControl_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_EgoVehicleControl_2eproto), true);
namespace apollo {
namespace shenlan {
namespace mpc {

// ===================================================================

void EgoVehicleControl::InitAsDefaultInstance() {
  ::apollo::shenlan::mpc::_EgoVehicleControl_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
class EgoVehicleControl::_Internal {
 public:
  using HasBits = decltype(std::declval<EgoVehicleControl>()._has_bits_);
  static const ::apollo::common::Header& header(const EgoVehicleControl* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_throttle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hand_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reverse(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_manual_gear_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::apollo::common::Header&
EgoVehicleControl::_Internal::header(const EgoVehicleControl* msg) {
  return *msg->header_;
}
void EgoVehicleControl::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
EgoVehicleControl::EgoVehicleControl()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.shenlan.mpc.EgoVehicleControl)
}
EgoVehicleControl::EgoVehicleControl(const EgoVehicleControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&throttle_, &from.throttle_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_) -
    reinterpret_cast<char*>(&throttle_)) + sizeof(gear_));
  // @@protoc_insertion_point(copy_constructor:apollo.shenlan.mpc.EgoVehicleControl)
}

void EgoVehicleControl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EgoVehicleControl_EgoVehicleControl_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_) -
      reinterpret_cast<char*>(&header_)) + sizeof(gear_));
}

EgoVehicleControl::~EgoVehicleControl() {
  // @@protoc_insertion_point(destructor:apollo.shenlan.mpc.EgoVehicleControl)
  SharedDtor();
}

void EgoVehicleControl::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void EgoVehicleControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EgoVehicleControl& EgoVehicleControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EgoVehicleControl_EgoVehicleControl_2eproto.base);
  return *internal_default_instance();
}


void EgoVehicleControl::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.shenlan.mpc.EgoVehicleControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&throttle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gear_) -
        reinterpret_cast<char*>(&throttle_)) + sizeof(gear_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EgoVehicleControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float throttle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_throttle(&has_bits);
          throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float steer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_steer(&has_bits);
          steer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float brake = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_brake(&has_bits);
          brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool hand_brake = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hand_brake(&has_bits);
          hand_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reverse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_reverse(&has_bits);
          reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gear = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_gear(&has_bits);
          gear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool manual_gear_shift = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_manual_gear_shift(&has_bits);
          manual_gear_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EgoVehicleControl::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.shenlan.mpc.EgoVehicleControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // optional float throttle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_throttle(), target);
  }

  // optional float steer = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_steer(), target);
  }

  // optional float brake = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_brake(), target);
  }

  // optional bool hand_brake = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_hand_brake(), target);
  }

  // optional bool reverse = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_reverse(), target);
  }

  // optional int32 gear = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_gear(), target);
  }

  // optional bool manual_gear_shift = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_manual_gear_shift(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.shenlan.mpc.EgoVehicleControl)
  return target;
}

size_t EgoVehicleControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.shenlan.mpc.EgoVehicleControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional float throttle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float steer = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float brake = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool hand_brake = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool reverse = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool manual_gear_shift = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 gear = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gear());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EgoVehicleControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.shenlan.mpc.EgoVehicleControl)
  GOOGLE_DCHECK_NE(&from, this);
  const EgoVehicleControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EgoVehicleControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.shenlan.mpc.EgoVehicleControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.shenlan.mpc.EgoVehicleControl)
    MergeFrom(*source);
  }
}

void EgoVehicleControl::MergeFrom(const EgoVehicleControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.shenlan.mpc.EgoVehicleControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      throttle_ = from.throttle_;
    }
    if (cached_has_bits & 0x00000004u) {
      steer_ = from.steer_;
    }
    if (cached_has_bits & 0x00000008u) {
      brake_ = from.brake_;
    }
    if (cached_has_bits & 0x00000010u) {
      hand_brake_ = from.hand_brake_;
    }
    if (cached_has_bits & 0x00000020u) {
      reverse_ = from.reverse_;
    }
    if (cached_has_bits & 0x00000040u) {
      manual_gear_shift_ = from.manual_gear_shift_;
    }
    if (cached_has_bits & 0x00000080u) {
      gear_ = from.gear_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EgoVehicleControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.shenlan.mpc.EgoVehicleControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgoVehicleControl::CopyFrom(const EgoVehicleControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.shenlan.mpc.EgoVehicleControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EgoVehicleControl::IsInitialized() const {
  return true;
}

void EgoVehicleControl::InternalSwap(EgoVehicleControl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(throttle_, other->throttle_);
  swap(steer_, other->steer_);
  swap(brake_, other->brake_);
  swap(hand_brake_, other->hand_brake_);
  swap(reverse_, other->reverse_);
  swap(manual_gear_shift_, other->manual_gear_shift_);
  swap(gear_, other->gear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EgoVehicleControl::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mpc
}  // namespace shenlan
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::shenlan::mpc::EgoVehicleControl* Arena::CreateMaybeMessage< ::apollo::shenlan::mpc::EgoVehicleControl >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::shenlan::mpc::EgoVehicleControl >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
