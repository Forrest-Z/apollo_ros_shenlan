// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EgoVehicleInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_EgoVehicleInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_EgoVehicleInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_EgoVehicleInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_EgoVehicleInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EgoVehicleInfo_2eproto;
namespace apollo {
namespace shenlan {
namespace mpc {
class EgoVehicleInfo;
class EgoVehicleInfoDefaultTypeInternal;
extern EgoVehicleInfoDefaultTypeInternal _EgoVehicleInfo_default_instance_;
}  // namespace mpc
}  // namespace shenlan
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::shenlan::mpc::EgoVehicleInfo* Arena::CreateMaybeMessage<::apollo::shenlan::mpc::EgoVehicleInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace shenlan {
namespace mpc {

// ===================================================================

class EgoVehicleInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.shenlan.mpc.EgoVehicleInfo) */ {
 public:
  EgoVehicleInfo();
  virtual ~EgoVehicleInfo();

  EgoVehicleInfo(const EgoVehicleInfo& from);
  EgoVehicleInfo(EgoVehicleInfo&& from) noexcept
    : EgoVehicleInfo() {
    *this = ::std::move(from);
  }

  inline EgoVehicleInfo& operator=(const EgoVehicleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EgoVehicleInfo& operator=(EgoVehicleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EgoVehicleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EgoVehicleInfo* internal_default_instance() {
    return reinterpret_cast<const EgoVehicleInfo*>(
               &_EgoVehicleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EgoVehicleInfo& a, EgoVehicleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EgoVehicleInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EgoVehicleInfo* New() const final {
    return CreateMaybeMessage<EgoVehicleInfo>(nullptr);
  }

  EgoVehicleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EgoVehicleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EgoVehicleInfo& from);
  void MergeFrom(const EgoVehicleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EgoVehicleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.shenlan.mpc.EgoVehicleInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EgoVehicleInfo_2eproto);
    return ::descriptor_table_EgoVehicleInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kRolenameFieldNumber = 3,
    kCenterOfMassFieldNumber = 17,
    kIdFieldNumber = 1,
    kMaxRpmFieldNumber = 5,
    kMoiFieldNumber = 6,
    kDampingRateFullThrottleFieldNumber = 7,
    kDampingRateZeroThrottleClutchEngagedFieldNumber = 8,
    kDampingRateZeroThrottleClutchDisengagedFieldNumber = 9,
    kUseGearAutoboxFieldNumber = 10,
    kGearSwitchTimeFieldNumber = 11,
    kClutchStrengthFieldNumber = 12,
    kFinalRatioFieldNumber = 13,
    kMassFieldNumber = 15,
    kDragCoefficientFieldNumber = 16,
    kWheelbaseFieldNumber = 18,
  };
  // optional string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string rolename = 3;
  bool has_rolename() const;
  private:
  bool _internal_has_rolename() const;
  public:
  void clear_rolename();
  const std::string& rolename() const;
  void set_rolename(const std::string& value);
  void set_rolename(std::string&& value);
  void set_rolename(const char* value);
  void set_rolename(const char* value, size_t size);
  std::string* mutable_rolename();
  std::string* release_rolename();
  void set_allocated_rolename(std::string* rolename);
  private:
  const std::string& _internal_rolename() const;
  void _internal_set_rolename(const std::string& value);
  std::string* _internal_mutable_rolename();
  public:

  // optional .apollo.common.Point3D center_of_mass = 17;
  bool has_center_of_mass() const;
  private:
  bool _internal_has_center_of_mass() const;
  public:
  void clear_center_of_mass();
  const ::apollo::common::Point3D& center_of_mass() const;
  ::apollo::common::Point3D* release_center_of_mass();
  ::apollo::common::Point3D* mutable_center_of_mass();
  void set_allocated_center_of_mass(::apollo::common::Point3D* center_of_mass);
  private:
  const ::apollo::common::Point3D& _internal_center_of_mass() const;
  ::apollo::common::Point3D* _internal_mutable_center_of_mass();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float max_rpm = 5;
  bool has_max_rpm() const;
  private:
  bool _internal_has_max_rpm() const;
  public:
  void clear_max_rpm();
  float max_rpm() const;
  void set_max_rpm(float value);
  private:
  float _internal_max_rpm() const;
  void _internal_set_max_rpm(float value);
  public:

  // optional float moi = 6;
  bool has_moi() const;
  private:
  bool _internal_has_moi() const;
  public:
  void clear_moi();
  float moi() const;
  void set_moi(float value);
  private:
  float _internal_moi() const;
  void _internal_set_moi(float value);
  public:

  // optional float damping_rate_full_throttle = 7;
  bool has_damping_rate_full_throttle() const;
  private:
  bool _internal_has_damping_rate_full_throttle() const;
  public:
  void clear_damping_rate_full_throttle();
  float damping_rate_full_throttle() const;
  void set_damping_rate_full_throttle(float value);
  private:
  float _internal_damping_rate_full_throttle() const;
  void _internal_set_damping_rate_full_throttle(float value);
  public:

  // optional float damping_rate_zero_throttle_clutch_engaged = 8;
  bool has_damping_rate_zero_throttle_clutch_engaged() const;
  private:
  bool _internal_has_damping_rate_zero_throttle_clutch_engaged() const;
  public:
  void clear_damping_rate_zero_throttle_clutch_engaged();
  float damping_rate_zero_throttle_clutch_engaged() const;
  void set_damping_rate_zero_throttle_clutch_engaged(float value);
  private:
  float _internal_damping_rate_zero_throttle_clutch_engaged() const;
  void _internal_set_damping_rate_zero_throttle_clutch_engaged(float value);
  public:

  // optional float damping_rate_zero_throttle_clutch_disengaged = 9;
  bool has_damping_rate_zero_throttle_clutch_disengaged() const;
  private:
  bool _internal_has_damping_rate_zero_throttle_clutch_disengaged() const;
  public:
  void clear_damping_rate_zero_throttle_clutch_disengaged();
  float damping_rate_zero_throttle_clutch_disengaged() const;
  void set_damping_rate_zero_throttle_clutch_disengaged(float value);
  private:
  float _internal_damping_rate_zero_throttle_clutch_disengaged() const;
  void _internal_set_damping_rate_zero_throttle_clutch_disengaged(float value);
  public:

  // optional bool use_gear_autobox = 10;
  bool has_use_gear_autobox() const;
  private:
  bool _internal_has_use_gear_autobox() const;
  public:
  void clear_use_gear_autobox();
  bool use_gear_autobox() const;
  void set_use_gear_autobox(bool value);
  private:
  bool _internal_use_gear_autobox() const;
  void _internal_set_use_gear_autobox(bool value);
  public:

  // optional float gear_switch_time = 11;
  bool has_gear_switch_time() const;
  private:
  bool _internal_has_gear_switch_time() const;
  public:
  void clear_gear_switch_time();
  float gear_switch_time() const;
  void set_gear_switch_time(float value);
  private:
  float _internal_gear_switch_time() const;
  void _internal_set_gear_switch_time(float value);
  public:

  // optional float clutch_strength = 12;
  bool has_clutch_strength() const;
  private:
  bool _internal_has_clutch_strength() const;
  public:
  void clear_clutch_strength();
  float clutch_strength() const;
  void set_clutch_strength(float value);
  private:
  float _internal_clutch_strength() const;
  void _internal_set_clutch_strength(float value);
  public:

  // optional float final_ratio = 13;
  bool has_final_ratio() const;
  private:
  bool _internal_has_final_ratio() const;
  public:
  void clear_final_ratio();
  float final_ratio() const;
  void set_final_ratio(float value);
  private:
  float _internal_final_ratio() const;
  void _internal_set_final_ratio(float value);
  public:

  // optional float mass = 15;
  bool has_mass() const;
  private:
  bool _internal_has_mass() const;
  public:
  void clear_mass();
  float mass() const;
  void set_mass(float value);
  private:
  float _internal_mass() const;
  void _internal_set_mass(float value);
  public:

  // optional float drag_coefficient = 16;
  bool has_drag_coefficient() const;
  private:
  bool _internal_has_drag_coefficient() const;
  public:
  void clear_drag_coefficient();
  float drag_coefficient() const;
  void set_drag_coefficient(float value);
  private:
  float _internal_drag_coefficient() const;
  void _internal_set_drag_coefficient(float value);
  public:

  // optional float wheelbase = 18;
  bool has_wheelbase() const;
  private:
  bool _internal_has_wheelbase() const;
  public:
  void clear_wheelbase();
  float wheelbase() const;
  void set_wheelbase(float value);
  private:
  float _internal_wheelbase() const;
  void _internal_set_wheelbase(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.shenlan.mpc.EgoVehicleInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rolename_;
  ::apollo::common::Point3D* center_of_mass_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  float max_rpm_;
  float moi_;
  float damping_rate_full_throttle_;
  float damping_rate_zero_throttle_clutch_engaged_;
  float damping_rate_zero_throttle_clutch_disengaged_;
  bool use_gear_autobox_;
  float gear_switch_time_;
  float clutch_strength_;
  float final_ratio_;
  float mass_;
  float drag_coefficient_;
  float wheelbase_;
  friend struct ::TableStruct_EgoVehicleInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EgoVehicleInfo

// optional uint32 id = 1;
inline bool EgoVehicleInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EgoVehicleInfo::has_id() const {
  return _internal_has_id();
}
inline void EgoVehicleInfo::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EgoVehicleInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EgoVehicleInfo::id() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleInfo.id)
  return _internal_id();
}
inline void EgoVehicleInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void EgoVehicleInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleInfo.id)
}

// optional string type = 2;
inline bool EgoVehicleInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EgoVehicleInfo::has_type() const {
  return _internal_has_type();
}
inline void EgoVehicleInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EgoVehicleInfo::type() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleInfo.type)
  return _internal_type();
}
inline void EgoVehicleInfo::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleInfo.type)
}
inline std::string* EgoVehicleInfo::mutable_type() {
  // @@protoc_insertion_point(field_mutable:apollo.shenlan.mpc.EgoVehicleInfo.type)
  return _internal_mutable_type();
}
inline const std::string& EgoVehicleInfo::_internal_type() const {
  return type_.GetNoArena();
}
inline void EgoVehicleInfo::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EgoVehicleInfo::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.shenlan.mpc.EgoVehicleInfo.type)
}
inline void EgoVehicleInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.shenlan.mpc.EgoVehicleInfo.type)
}
inline void EgoVehicleInfo::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.shenlan.mpc.EgoVehicleInfo.type)
}
inline std::string* EgoVehicleInfo::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EgoVehicleInfo::release_type() {
  // @@protoc_insertion_point(field_release:apollo.shenlan.mpc.EgoVehicleInfo.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EgoVehicleInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:apollo.shenlan.mpc.EgoVehicleInfo.type)
}

// optional string rolename = 3;
inline bool EgoVehicleInfo::_internal_has_rolename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EgoVehicleInfo::has_rolename() const {
  return _internal_has_rolename();
}
inline void EgoVehicleInfo::clear_rolename() {
  rolename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EgoVehicleInfo::rolename() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleInfo.rolename)
  return _internal_rolename();
}
inline void EgoVehicleInfo::set_rolename(const std::string& value) {
  _internal_set_rolename(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleInfo.rolename)
}
inline std::string* EgoVehicleInfo::mutable_rolename() {
  // @@protoc_insertion_point(field_mutable:apollo.shenlan.mpc.EgoVehicleInfo.rolename)
  return _internal_mutable_rolename();
}
inline const std::string& EgoVehicleInfo::_internal_rolename() const {
  return rolename_.GetNoArena();
}
inline void EgoVehicleInfo::_internal_set_rolename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  rolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EgoVehicleInfo::set_rolename(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  rolename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.shenlan.mpc.EgoVehicleInfo.rolename)
}
inline void EgoVehicleInfo::set_rolename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  rolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.shenlan.mpc.EgoVehicleInfo.rolename)
}
inline void EgoVehicleInfo::set_rolename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  rolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.shenlan.mpc.EgoVehicleInfo.rolename)
}
inline std::string* EgoVehicleInfo::_internal_mutable_rolename() {
  _has_bits_[0] |= 0x00000002u;
  return rolename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EgoVehicleInfo::release_rolename() {
  // @@protoc_insertion_point(field_release:apollo.shenlan.mpc.EgoVehicleInfo.rolename)
  if (!has_rolename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return rolename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EgoVehicleInfo::set_allocated_rolename(std::string* rolename) {
  if (rolename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rolename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rolename);
  // @@protoc_insertion_point(field_set_allocated:apollo.shenlan.mpc.EgoVehicleInfo.rolename)
}

// optional float max_rpm = 5;
inline bool EgoVehicleInfo::_internal_has_max_rpm() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EgoVehicleInfo::has_max_rpm() const {
  return _internal_has_max_rpm();
}
inline void EgoVehicleInfo::clear_max_rpm() {
  max_rpm_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float EgoVehicleInfo::_internal_max_rpm() const {
  return max_rpm_;
}
inline float EgoVehicleInfo::max_rpm() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleInfo.max_rpm)
  return _internal_max_rpm();
}
inline void EgoVehicleInfo::_internal_set_max_rpm(float value) {
  _has_bits_[0] |= 0x00000010u;
  max_rpm_ = value;
}
inline void EgoVehicleInfo::set_max_rpm(float value) {
  _internal_set_max_rpm(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleInfo.max_rpm)
}

// optional float moi = 6;
inline bool EgoVehicleInfo::_internal_has_moi() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool EgoVehicleInfo::has_moi() const {
  return _internal_has_moi();
}
inline void EgoVehicleInfo::clear_moi() {
  moi_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float EgoVehicleInfo::_internal_moi() const {
  return moi_;
}
inline float EgoVehicleInfo::moi() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleInfo.moi)
  return _internal_moi();
}
inline void EgoVehicleInfo::_internal_set_moi(float value) {
  _has_bits_[0] |= 0x00000020u;
  moi_ = value;
}
inline void EgoVehicleInfo::set_moi(float value) {
  _internal_set_moi(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleInfo.moi)
}

// optional float damping_rate_full_throttle = 7;
inline bool EgoVehicleInfo::_internal_has_damping_rate_full_throttle() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool EgoVehicleInfo::has_damping_rate_full_throttle() const {
  return _internal_has_damping_rate_full_throttle();
}
inline void EgoVehicleInfo::clear_damping_rate_full_throttle() {
  damping_rate_full_throttle_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float EgoVehicleInfo::_internal_damping_rate_full_throttle() const {
  return damping_rate_full_throttle_;
}
inline float EgoVehicleInfo::damping_rate_full_throttle() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleInfo.damping_rate_full_throttle)
  return _internal_damping_rate_full_throttle();
}
inline void EgoVehicleInfo::_internal_set_damping_rate_full_throttle(float value) {
  _has_bits_[0] |= 0x00000040u;
  damping_rate_full_throttle_ = value;
}
inline void EgoVehicleInfo::set_damping_rate_full_throttle(float value) {
  _internal_set_damping_rate_full_throttle(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleInfo.damping_rate_full_throttle)
}

// optional float damping_rate_zero_throttle_clutch_engaged = 8;
inline bool EgoVehicleInfo::_internal_has_damping_rate_zero_throttle_clutch_engaged() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool EgoVehicleInfo::has_damping_rate_zero_throttle_clutch_engaged() const {
  return _internal_has_damping_rate_zero_throttle_clutch_engaged();
}
inline void EgoVehicleInfo::clear_damping_rate_zero_throttle_clutch_engaged() {
  damping_rate_zero_throttle_clutch_engaged_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float EgoVehicleInfo::_internal_damping_rate_zero_throttle_clutch_engaged() const {
  return damping_rate_zero_throttle_clutch_engaged_;
}
inline float EgoVehicleInfo::damping_rate_zero_throttle_clutch_engaged() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleInfo.damping_rate_zero_throttle_clutch_engaged)
  return _internal_damping_rate_zero_throttle_clutch_engaged();
}
inline void EgoVehicleInfo::_internal_set_damping_rate_zero_throttle_clutch_engaged(float value) {
  _has_bits_[0] |= 0x00000080u;
  damping_rate_zero_throttle_clutch_engaged_ = value;
}
inline void EgoVehicleInfo::set_damping_rate_zero_throttle_clutch_engaged(float value) {
  _internal_set_damping_rate_zero_throttle_clutch_engaged(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleInfo.damping_rate_zero_throttle_clutch_engaged)
}

// optional float damping_rate_zero_throttle_clutch_disengaged = 9;
inline bool EgoVehicleInfo::_internal_has_damping_rate_zero_throttle_clutch_disengaged() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool EgoVehicleInfo::has_damping_rate_zero_throttle_clutch_disengaged() const {
  return _internal_has_damping_rate_zero_throttle_clutch_disengaged();
}
inline void EgoVehicleInfo::clear_damping_rate_zero_throttle_clutch_disengaged() {
  damping_rate_zero_throttle_clutch_disengaged_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float EgoVehicleInfo::_internal_damping_rate_zero_throttle_clutch_disengaged() const {
  return damping_rate_zero_throttle_clutch_disengaged_;
}
inline float EgoVehicleInfo::damping_rate_zero_throttle_clutch_disengaged() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleInfo.damping_rate_zero_throttle_clutch_disengaged)
  return _internal_damping_rate_zero_throttle_clutch_disengaged();
}
inline void EgoVehicleInfo::_internal_set_damping_rate_zero_throttle_clutch_disengaged(float value) {
  _has_bits_[0] |= 0x00000100u;
  damping_rate_zero_throttle_clutch_disengaged_ = value;
}
inline void EgoVehicleInfo::set_damping_rate_zero_throttle_clutch_disengaged(float value) {
  _internal_set_damping_rate_zero_throttle_clutch_disengaged(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleInfo.damping_rate_zero_throttle_clutch_disengaged)
}

// optional bool use_gear_autobox = 10;
inline bool EgoVehicleInfo::_internal_has_use_gear_autobox() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool EgoVehicleInfo::has_use_gear_autobox() const {
  return _internal_has_use_gear_autobox();
}
inline void EgoVehicleInfo::clear_use_gear_autobox() {
  use_gear_autobox_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool EgoVehicleInfo::_internal_use_gear_autobox() const {
  return use_gear_autobox_;
}
inline bool EgoVehicleInfo::use_gear_autobox() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleInfo.use_gear_autobox)
  return _internal_use_gear_autobox();
}
inline void EgoVehicleInfo::_internal_set_use_gear_autobox(bool value) {
  _has_bits_[0] |= 0x00000200u;
  use_gear_autobox_ = value;
}
inline void EgoVehicleInfo::set_use_gear_autobox(bool value) {
  _internal_set_use_gear_autobox(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleInfo.use_gear_autobox)
}

// optional float gear_switch_time = 11;
inline bool EgoVehicleInfo::_internal_has_gear_switch_time() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool EgoVehicleInfo::has_gear_switch_time() const {
  return _internal_has_gear_switch_time();
}
inline void EgoVehicleInfo::clear_gear_switch_time() {
  gear_switch_time_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float EgoVehicleInfo::_internal_gear_switch_time() const {
  return gear_switch_time_;
}
inline float EgoVehicleInfo::gear_switch_time() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleInfo.gear_switch_time)
  return _internal_gear_switch_time();
}
inline void EgoVehicleInfo::_internal_set_gear_switch_time(float value) {
  _has_bits_[0] |= 0x00000400u;
  gear_switch_time_ = value;
}
inline void EgoVehicleInfo::set_gear_switch_time(float value) {
  _internal_set_gear_switch_time(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleInfo.gear_switch_time)
}

// optional float clutch_strength = 12;
inline bool EgoVehicleInfo::_internal_has_clutch_strength() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool EgoVehicleInfo::has_clutch_strength() const {
  return _internal_has_clutch_strength();
}
inline void EgoVehicleInfo::clear_clutch_strength() {
  clutch_strength_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float EgoVehicleInfo::_internal_clutch_strength() const {
  return clutch_strength_;
}
inline float EgoVehicleInfo::clutch_strength() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleInfo.clutch_strength)
  return _internal_clutch_strength();
}
inline void EgoVehicleInfo::_internal_set_clutch_strength(float value) {
  _has_bits_[0] |= 0x00000800u;
  clutch_strength_ = value;
}
inline void EgoVehicleInfo::set_clutch_strength(float value) {
  _internal_set_clutch_strength(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleInfo.clutch_strength)
}

// optional float final_ratio = 13;
inline bool EgoVehicleInfo::_internal_has_final_ratio() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool EgoVehicleInfo::has_final_ratio() const {
  return _internal_has_final_ratio();
}
inline void EgoVehicleInfo::clear_final_ratio() {
  final_ratio_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float EgoVehicleInfo::_internal_final_ratio() const {
  return final_ratio_;
}
inline float EgoVehicleInfo::final_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleInfo.final_ratio)
  return _internal_final_ratio();
}
inline void EgoVehicleInfo::_internal_set_final_ratio(float value) {
  _has_bits_[0] |= 0x00001000u;
  final_ratio_ = value;
}
inline void EgoVehicleInfo::set_final_ratio(float value) {
  _internal_set_final_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleInfo.final_ratio)
}

// optional float mass = 15;
inline bool EgoVehicleInfo::_internal_has_mass() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool EgoVehicleInfo::has_mass() const {
  return _internal_has_mass();
}
inline void EgoVehicleInfo::clear_mass() {
  mass_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float EgoVehicleInfo::_internal_mass() const {
  return mass_;
}
inline float EgoVehicleInfo::mass() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleInfo.mass)
  return _internal_mass();
}
inline void EgoVehicleInfo::_internal_set_mass(float value) {
  _has_bits_[0] |= 0x00002000u;
  mass_ = value;
}
inline void EgoVehicleInfo::set_mass(float value) {
  _internal_set_mass(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleInfo.mass)
}

// optional float drag_coefficient = 16;
inline bool EgoVehicleInfo::_internal_has_drag_coefficient() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool EgoVehicleInfo::has_drag_coefficient() const {
  return _internal_has_drag_coefficient();
}
inline void EgoVehicleInfo::clear_drag_coefficient() {
  drag_coefficient_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float EgoVehicleInfo::_internal_drag_coefficient() const {
  return drag_coefficient_;
}
inline float EgoVehicleInfo::drag_coefficient() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleInfo.drag_coefficient)
  return _internal_drag_coefficient();
}
inline void EgoVehicleInfo::_internal_set_drag_coefficient(float value) {
  _has_bits_[0] |= 0x00004000u;
  drag_coefficient_ = value;
}
inline void EgoVehicleInfo::set_drag_coefficient(float value) {
  _internal_set_drag_coefficient(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleInfo.drag_coefficient)
}

// optional .apollo.common.Point3D center_of_mass = 17;
inline bool EgoVehicleInfo::_internal_has_center_of_mass() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || center_of_mass_ != nullptr);
  return value;
}
inline bool EgoVehicleInfo::has_center_of_mass() const {
  return _internal_has_center_of_mass();
}
inline const ::apollo::common::Point3D& EgoVehicleInfo::_internal_center_of_mass() const {
  const ::apollo::common::Point3D* p = center_of_mass_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& EgoVehicleInfo::center_of_mass() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleInfo.center_of_mass)
  return _internal_center_of_mass();
}
inline ::apollo::common::Point3D* EgoVehicleInfo::release_center_of_mass() {
  // @@protoc_insertion_point(field_release:apollo.shenlan.mpc.EgoVehicleInfo.center_of_mass)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = center_of_mass_;
  center_of_mass_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* EgoVehicleInfo::_internal_mutable_center_of_mass() {
  _has_bits_[0] |= 0x00000004u;
  if (center_of_mass_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    center_of_mass_ = p;
  }
  return center_of_mass_;
}
inline ::apollo::common::Point3D* EgoVehicleInfo::mutable_center_of_mass() {
  // @@protoc_insertion_point(field_mutable:apollo.shenlan.mpc.EgoVehicleInfo.center_of_mass)
  return _internal_mutable_center_of_mass();
}
inline void EgoVehicleInfo::set_allocated_center_of_mass(::apollo::common::Point3D* center_of_mass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_of_mass_);
  }
  if (center_of_mass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center_of_mass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center_of_mass, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  center_of_mass_ = center_of_mass;
  // @@protoc_insertion_point(field_set_allocated:apollo.shenlan.mpc.EgoVehicleInfo.center_of_mass)
}

// optional float wheelbase = 18;
inline bool EgoVehicleInfo::_internal_has_wheelbase() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool EgoVehicleInfo::has_wheelbase() const {
  return _internal_has_wheelbase();
}
inline void EgoVehicleInfo::clear_wheelbase() {
  wheelbase_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float EgoVehicleInfo::_internal_wheelbase() const {
  return wheelbase_;
}
inline float EgoVehicleInfo::wheelbase() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleInfo.wheelbase)
  return _internal_wheelbase();
}
inline void EgoVehicleInfo::_internal_set_wheelbase(float value) {
  _has_bits_[0] |= 0x00008000u;
  wheelbase_ = value;
}
inline void EgoVehicleInfo::set_wheelbase(float value) {
  _internal_set_wheelbase(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleInfo.wheelbase)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mpc
}  // namespace shenlan
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_EgoVehicleInfo_2eproto
