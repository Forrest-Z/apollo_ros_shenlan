// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EgoVehicleControl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_EgoVehicleControl_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_EgoVehicleControl_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_EgoVehicleControl_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_EgoVehicleControl_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EgoVehicleControl_2eproto;
namespace apollo {
namespace shenlan {
namespace mpc {
class EgoVehicleControl;
class EgoVehicleControlDefaultTypeInternal;
extern EgoVehicleControlDefaultTypeInternal _EgoVehicleControl_default_instance_;
}  // namespace mpc
}  // namespace shenlan
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::shenlan::mpc::EgoVehicleControl* Arena::CreateMaybeMessage<::apollo::shenlan::mpc::EgoVehicleControl>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace shenlan {
namespace mpc {

// ===================================================================

class EgoVehicleControl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.shenlan.mpc.EgoVehicleControl) */ {
 public:
  EgoVehicleControl();
  virtual ~EgoVehicleControl();

  EgoVehicleControl(const EgoVehicleControl& from);
  EgoVehicleControl(EgoVehicleControl&& from) noexcept
    : EgoVehicleControl() {
    *this = ::std::move(from);
  }

  inline EgoVehicleControl& operator=(const EgoVehicleControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline EgoVehicleControl& operator=(EgoVehicleControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EgoVehicleControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EgoVehicleControl* internal_default_instance() {
    return reinterpret_cast<const EgoVehicleControl*>(
               &_EgoVehicleControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EgoVehicleControl& a, EgoVehicleControl& b) {
    a.Swap(&b);
  }
  inline void Swap(EgoVehicleControl* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EgoVehicleControl* New() const final {
    return CreateMaybeMessage<EgoVehicleControl>(nullptr);
  }

  EgoVehicleControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EgoVehicleControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EgoVehicleControl& from);
  void MergeFrom(const EgoVehicleControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EgoVehicleControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.shenlan.mpc.EgoVehicleControl";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EgoVehicleControl_2eproto);
    return ::descriptor_table_EgoVehicleControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kThrottleFieldNumber = 2,
    kSteerFieldNumber = 3,
    kBrakeFieldNumber = 4,
    kHandBrakeFieldNumber = 5,
    kReverseFieldNumber = 6,
    kManualGearShiftFieldNumber = 8,
    kGearFieldNumber = 7,
  };
  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // optional float throttle = 2;
  bool has_throttle() const;
  private:
  bool _internal_has_throttle() const;
  public:
  void clear_throttle();
  float throttle() const;
  void set_throttle(float value);
  private:
  float _internal_throttle() const;
  void _internal_set_throttle(float value);
  public:

  // optional float steer = 3;
  bool has_steer() const;
  private:
  bool _internal_has_steer() const;
  public:
  void clear_steer();
  float steer() const;
  void set_steer(float value);
  private:
  float _internal_steer() const;
  void _internal_set_steer(float value);
  public:

  // optional float brake = 4;
  bool has_brake() const;
  private:
  bool _internal_has_brake() const;
  public:
  void clear_brake();
  float brake() const;
  void set_brake(float value);
  private:
  float _internal_brake() const;
  void _internal_set_brake(float value);
  public:

  // optional bool hand_brake = 5;
  bool has_hand_brake() const;
  private:
  bool _internal_has_hand_brake() const;
  public:
  void clear_hand_brake();
  bool hand_brake() const;
  void set_hand_brake(bool value);
  private:
  bool _internal_hand_brake() const;
  void _internal_set_hand_brake(bool value);
  public:

  // optional bool reverse = 6;
  bool has_reverse() const;
  private:
  bool _internal_has_reverse() const;
  public:
  void clear_reverse();
  bool reverse() const;
  void set_reverse(bool value);
  private:
  bool _internal_reverse() const;
  void _internal_set_reverse(bool value);
  public:

  // optional bool manual_gear_shift = 8;
  bool has_manual_gear_shift() const;
  private:
  bool _internal_has_manual_gear_shift() const;
  public:
  void clear_manual_gear_shift();
  bool manual_gear_shift() const;
  void set_manual_gear_shift(bool value);
  private:
  bool _internal_manual_gear_shift() const;
  void _internal_set_manual_gear_shift(bool value);
  public:

  // optional int32 gear = 7;
  bool has_gear() const;
  private:
  bool _internal_has_gear() const;
  public:
  void clear_gear();
  ::PROTOBUF_NAMESPACE_ID::int32 gear() const;
  void set_gear(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gear() const;
  void _internal_set_gear(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.shenlan.mpc.EgoVehicleControl)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::Header* header_;
  float throttle_;
  float steer_;
  float brake_;
  bool hand_brake_;
  bool reverse_;
  bool manual_gear_shift_;
  ::PROTOBUF_NAMESPACE_ID::int32 gear_;
  friend struct ::TableStruct_EgoVehicleControl_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EgoVehicleControl

// optional .apollo.common.Header header = 1;
inline bool EgoVehicleControl::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool EgoVehicleControl::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& EgoVehicleControl::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& EgoVehicleControl::header() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleControl.header)
  return _internal_header();
}
inline ::apollo::common::Header* EgoVehicleControl::release_header() {
  // @@protoc_insertion_point(field_release:apollo.shenlan.mpc.EgoVehicleControl.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* EgoVehicleControl::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* EgoVehicleControl::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.shenlan.mpc.EgoVehicleControl.header)
  return _internal_mutable_header();
}
inline void EgoVehicleControl::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.shenlan.mpc.EgoVehicleControl.header)
}

// optional float throttle = 2;
inline bool EgoVehicleControl::_internal_has_throttle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EgoVehicleControl::has_throttle() const {
  return _internal_has_throttle();
}
inline void EgoVehicleControl::clear_throttle() {
  throttle_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float EgoVehicleControl::_internal_throttle() const {
  return throttle_;
}
inline float EgoVehicleControl::throttle() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleControl.throttle)
  return _internal_throttle();
}
inline void EgoVehicleControl::_internal_set_throttle(float value) {
  _has_bits_[0] |= 0x00000002u;
  throttle_ = value;
}
inline void EgoVehicleControl::set_throttle(float value) {
  _internal_set_throttle(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleControl.throttle)
}

// optional float steer = 3;
inline bool EgoVehicleControl::_internal_has_steer() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EgoVehicleControl::has_steer() const {
  return _internal_has_steer();
}
inline void EgoVehicleControl::clear_steer() {
  steer_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float EgoVehicleControl::_internal_steer() const {
  return steer_;
}
inline float EgoVehicleControl::steer() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleControl.steer)
  return _internal_steer();
}
inline void EgoVehicleControl::_internal_set_steer(float value) {
  _has_bits_[0] |= 0x00000004u;
  steer_ = value;
}
inline void EgoVehicleControl::set_steer(float value) {
  _internal_set_steer(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleControl.steer)
}

// optional float brake = 4;
inline bool EgoVehicleControl::_internal_has_brake() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EgoVehicleControl::has_brake() const {
  return _internal_has_brake();
}
inline void EgoVehicleControl::clear_brake() {
  brake_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float EgoVehicleControl::_internal_brake() const {
  return brake_;
}
inline float EgoVehicleControl::brake() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleControl.brake)
  return _internal_brake();
}
inline void EgoVehicleControl::_internal_set_brake(float value) {
  _has_bits_[0] |= 0x00000008u;
  brake_ = value;
}
inline void EgoVehicleControl::set_brake(float value) {
  _internal_set_brake(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleControl.brake)
}

// optional bool hand_brake = 5;
inline bool EgoVehicleControl::_internal_has_hand_brake() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EgoVehicleControl::has_hand_brake() const {
  return _internal_has_hand_brake();
}
inline void EgoVehicleControl::clear_hand_brake() {
  hand_brake_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool EgoVehicleControl::_internal_hand_brake() const {
  return hand_brake_;
}
inline bool EgoVehicleControl::hand_brake() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleControl.hand_brake)
  return _internal_hand_brake();
}
inline void EgoVehicleControl::_internal_set_hand_brake(bool value) {
  _has_bits_[0] |= 0x00000010u;
  hand_brake_ = value;
}
inline void EgoVehicleControl::set_hand_brake(bool value) {
  _internal_set_hand_brake(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleControl.hand_brake)
}

// optional bool reverse = 6;
inline bool EgoVehicleControl::_internal_has_reverse() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool EgoVehicleControl::has_reverse() const {
  return _internal_has_reverse();
}
inline void EgoVehicleControl::clear_reverse() {
  reverse_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool EgoVehicleControl::_internal_reverse() const {
  return reverse_;
}
inline bool EgoVehicleControl::reverse() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleControl.reverse)
  return _internal_reverse();
}
inline void EgoVehicleControl::_internal_set_reverse(bool value) {
  _has_bits_[0] |= 0x00000020u;
  reverse_ = value;
}
inline void EgoVehicleControl::set_reverse(bool value) {
  _internal_set_reverse(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleControl.reverse)
}

// optional int32 gear = 7;
inline bool EgoVehicleControl::_internal_has_gear() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool EgoVehicleControl::has_gear() const {
  return _internal_has_gear();
}
inline void EgoVehicleControl::clear_gear() {
  gear_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EgoVehicleControl::_internal_gear() const {
  return gear_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EgoVehicleControl::gear() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleControl.gear)
  return _internal_gear();
}
inline void EgoVehicleControl::_internal_set_gear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  gear_ = value;
}
inline void EgoVehicleControl::set_gear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gear(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleControl.gear)
}

// optional bool manual_gear_shift = 8;
inline bool EgoVehicleControl::_internal_has_manual_gear_shift() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool EgoVehicleControl::has_manual_gear_shift() const {
  return _internal_has_manual_gear_shift();
}
inline void EgoVehicleControl::clear_manual_gear_shift() {
  manual_gear_shift_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool EgoVehicleControl::_internal_manual_gear_shift() const {
  return manual_gear_shift_;
}
inline bool EgoVehicleControl::manual_gear_shift() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.EgoVehicleControl.manual_gear_shift)
  return _internal_manual_gear_shift();
}
inline void EgoVehicleControl::_internal_set_manual_gear_shift(bool value) {
  _has_bits_[0] |= 0x00000040u;
  manual_gear_shift_ = value;
}
inline void EgoVehicleControl::set_manual_gear_shift(bool value) {
  _internal_set_manual_gear_shift(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.EgoVehicleControl.manual_gear_shift)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mpc
}  // namespace shenlan
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_EgoVehicleControl_2eproto
