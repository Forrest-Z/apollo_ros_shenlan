// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EgoVehicleInfo.proto

#include "EgoVehicleInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_geometry_2eproto;
namespace apollo {
namespace shenlan {
namespace mpc {
class EgoVehicleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EgoVehicleInfo> _instance;
} _EgoVehicleInfo_default_instance_;
}  // namespace mpc
}  // namespace shenlan
}  // namespace apollo
static void InitDefaultsscc_info_EgoVehicleInfo_EgoVehicleInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::shenlan::mpc::_EgoVehicleInfo_default_instance_;
    new (ptr) ::apollo::shenlan::mpc::EgoVehicleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::shenlan::mpc::EgoVehicleInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EgoVehicleInfo_EgoVehicleInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EgoVehicleInfo_EgoVehicleInfo_2eproto}, {
      &scc_info_Point3D_geometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_EgoVehicleInfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_EgoVehicleInfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_EgoVehicleInfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_EgoVehicleInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, rolename_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, max_rpm_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, moi_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, damping_rate_full_throttle_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, damping_rate_zero_throttle_clutch_engaged_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, damping_rate_zero_throttle_clutch_disengaged_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, use_gear_autobox_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, gear_switch_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, clutch_strength_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, final_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, mass_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, drag_coefficient_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, center_of_mass_),
  PROTOBUF_FIELD_OFFSET(::apollo::shenlan::mpc::EgoVehicleInfo, wheelbase_),
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  2,
  15,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::apollo::shenlan::mpc::EgoVehicleInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::shenlan::mpc::_EgoVehicleInfo_default_instance_),
};

const char descriptor_table_protodef_EgoVehicleInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024EgoVehicleInfo.proto\022\022apollo.shenlan.m"
  "pc\032\016geometry.proto\"\264\003\n\016EgoVehicleInfo\022\n\n"
  "\002id\030\001 \001(\r\022\014\n\004type\030\002 \001(\t\022\020\n\010rolename\030\003 \001("
  "\t\022\017\n\007max_rpm\030\005 \001(\002\022\013\n\003moi\030\006 \001(\002\022\"\n\032dampi"
  "ng_rate_full_throttle\030\007 \001(\002\0221\n)damping_r"
  "ate_zero_throttle_clutch_engaged\030\010 \001(\002\0224"
  "\n,damping_rate_zero_throttle_clutch_dise"
  "ngaged\030\t \001(\002\022\030\n\020use_gear_autobox\030\n \001(\010\022\030"
  "\n\020gear_switch_time\030\013 \001(\002\022\027\n\017clutch_stren"
  "gth\030\014 \001(\002\022\023\n\013final_ratio\030\r \001(\002\022\014\n\004mass\030\017"
  " \001(\002\022\030\n\020drag_coefficient\030\020 \001(\002\022.\n\016center"
  "_of_mass\030\021 \001(\0132\026.apollo.common.Point3D\022\021"
  "\n\twheelbase\030\022 \001(\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_EgoVehicleInfo_2eproto_deps[1] = {
  &::descriptor_table_geometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_EgoVehicleInfo_2eproto_sccs[1] = {
  &scc_info_EgoVehicleInfo_EgoVehicleInfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_EgoVehicleInfo_2eproto_once;
static bool descriptor_table_EgoVehicleInfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EgoVehicleInfo_2eproto = {
  &descriptor_table_EgoVehicleInfo_2eproto_initialized, descriptor_table_protodef_EgoVehicleInfo_2eproto, "EgoVehicleInfo.proto", 497,
  &descriptor_table_EgoVehicleInfo_2eproto_once, descriptor_table_EgoVehicleInfo_2eproto_sccs, descriptor_table_EgoVehicleInfo_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_EgoVehicleInfo_2eproto::offsets,
  file_level_metadata_EgoVehicleInfo_2eproto, 1, file_level_enum_descriptors_EgoVehicleInfo_2eproto, file_level_service_descriptors_EgoVehicleInfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_EgoVehicleInfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_EgoVehicleInfo_2eproto), true);
namespace apollo {
namespace shenlan {
namespace mpc {

// ===================================================================

void EgoVehicleInfo::InitAsDefaultInstance() {
  ::apollo::shenlan::mpc::_EgoVehicleInfo_default_instance_._instance.get_mutable()->center_of_mass_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
}
class EgoVehicleInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<EgoVehicleInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rolename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_rpm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_moi(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_damping_rate_full_throttle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_damping_rate_zero_throttle_clutch_engaged(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_damping_rate_zero_throttle_clutch_disengaged(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_use_gear_autobox(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_gear_switch_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_clutch_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_final_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_mass(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_drag_coefficient(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::common::Point3D& center_of_mass(const EgoVehicleInfo* msg);
  static void set_has_center_of_mass(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wheelbase(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::apollo::common::Point3D&
EgoVehicleInfo::_Internal::center_of_mass(const EgoVehicleInfo* msg) {
  return *msg->center_of_mass_;
}
void EgoVehicleInfo::clear_center_of_mass() {
  if (center_of_mass_ != nullptr) center_of_mass_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
EgoVehicleInfo::EgoVehicleInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.shenlan.mpc.EgoVehicleInfo)
}
EgoVehicleInfo::EgoVehicleInfo(const EgoVehicleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rolename()) {
    rolename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rolename_);
  }
  if (from._internal_has_center_of_mass()) {
    center_of_mass_ = new ::apollo::common::Point3D(*from.center_of_mass_);
  } else {
    center_of_mass_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheelbase_) -
    reinterpret_cast<char*>(&id_)) + sizeof(wheelbase_));
  // @@protoc_insertion_point(copy_constructor:apollo.shenlan.mpc.EgoVehicleInfo)
}

void EgoVehicleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EgoVehicleInfo_EgoVehicleInfo_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&center_of_mass_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheelbase_) -
      reinterpret_cast<char*>(&center_of_mass_)) + sizeof(wheelbase_));
}

EgoVehicleInfo::~EgoVehicleInfo() {
  // @@protoc_insertion_point(destructor:apollo.shenlan.mpc.EgoVehicleInfo)
  SharedDtor();
}

void EgoVehicleInfo::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete center_of_mass_;
}

void EgoVehicleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EgoVehicleInfo& EgoVehicleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EgoVehicleInfo_EgoVehicleInfo_2eproto.base);
  return *internal_default_instance();
}


void EgoVehicleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.shenlan.mpc.EgoVehicleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      rolename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(center_of_mass_ != nullptr);
      center_of_mass_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&damping_rate_zero_throttle_clutch_engaged_) -
        reinterpret_cast<char*>(&id_)) + sizeof(damping_rate_zero_throttle_clutch_engaged_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&damping_rate_zero_throttle_clutch_disengaged_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wheelbase_) -
        reinterpret_cast<char*>(&damping_rate_zero_throttle_clutch_disengaged_)) + sizeof(wheelbase_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EgoVehicleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_type(), ptr, ctx, "apollo.shenlan.mpc.EgoVehicleInfo.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rolename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_rolename(), ptr, ctx, "apollo.shenlan.mpc.EgoVehicleInfo.rolename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float max_rpm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_max_rpm(&has_bits);
          max_rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float moi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_moi(&has_bits);
          moi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float damping_rate_full_throttle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_damping_rate_full_throttle(&has_bits);
          damping_rate_full_throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float damping_rate_zero_throttle_clutch_engaged = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_damping_rate_zero_throttle_clutch_engaged(&has_bits);
          damping_rate_zero_throttle_clutch_engaged_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float damping_rate_zero_throttle_clutch_disengaged = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_damping_rate_zero_throttle_clutch_disengaged(&has_bits);
          damping_rate_zero_throttle_clutch_disengaged_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool use_gear_autobox = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_use_gear_autobox(&has_bits);
          use_gear_autobox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float gear_switch_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_gear_switch_time(&has_bits);
          gear_switch_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float clutch_strength = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_clutch_strength(&has_bits);
          clutch_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float final_ratio = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_final_ratio(&has_bits);
          final_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float mass = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_mass(&has_bits);
          mass_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float drag_coefficient = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_drag_coefficient(&has_bits);
          drag_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D center_of_mass = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_of_mass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float wheelbase = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_wheelbase(&has_bits);
          wheelbase_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EgoVehicleInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.shenlan.mpc.EgoVehicleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.shenlan.mpc.EgoVehicleInfo.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // optional string rolename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rolename().data(), static_cast<int>(this->_internal_rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.shenlan.mpc.EgoVehicleInfo.rolename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rolename(), target);
  }

  // optional float max_rpm = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_max_rpm(), target);
  }

  // optional float moi = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_moi(), target);
  }

  // optional float damping_rate_full_throttle = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_damping_rate_full_throttle(), target);
  }

  // optional float damping_rate_zero_throttle_clutch_engaged = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_damping_rate_zero_throttle_clutch_engaged(), target);
  }

  // optional float damping_rate_zero_throttle_clutch_disengaged = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_damping_rate_zero_throttle_clutch_disengaged(), target);
  }

  // optional bool use_gear_autobox = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_use_gear_autobox(), target);
  }

  // optional float gear_switch_time = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_gear_switch_time(), target);
  }

  // optional float clutch_strength = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_clutch_strength(), target);
  }

  // optional float final_ratio = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_final_ratio(), target);
  }

  // optional float mass = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_mass(), target);
  }

  // optional float drag_coefficient = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_drag_coefficient(), target);
  }

  // optional .apollo.common.Point3D center_of_mass = 17;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, _Internal::center_of_mass(this), target, stream);
  }

  // optional float wheelbase = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_wheelbase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.shenlan.mpc.EgoVehicleInfo)
  return target;
}

size_t EgoVehicleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.shenlan.mpc.EgoVehicleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string rolename = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rolename());
    }

    // optional .apollo.common.Point3D center_of_mass = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *center_of_mass_);
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional float max_rpm = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float moi = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float damping_rate_full_throttle = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float damping_rate_zero_throttle_clutch_engaged = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float damping_rate_zero_throttle_clutch_disengaged = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional bool use_gear_autobox = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional float gear_switch_time = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float clutch_strength = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float final_ratio = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float mass = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float drag_coefficient = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float wheelbase = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EgoVehicleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.shenlan.mpc.EgoVehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EgoVehicleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EgoVehicleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.shenlan.mpc.EgoVehicleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.shenlan.mpc.EgoVehicleInfo)
    MergeFrom(*source);
  }
}

void EgoVehicleInfo::MergeFrom(const EgoVehicleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.shenlan.mpc.EgoVehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      rolename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rolename_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_center_of_mass()->::apollo::common::Point3D::MergeFrom(from._internal_center_of_mass());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_rpm_ = from.max_rpm_;
    }
    if (cached_has_bits & 0x00000020u) {
      moi_ = from.moi_;
    }
    if (cached_has_bits & 0x00000040u) {
      damping_rate_full_throttle_ = from.damping_rate_full_throttle_;
    }
    if (cached_has_bits & 0x00000080u) {
      damping_rate_zero_throttle_clutch_engaged_ = from.damping_rate_zero_throttle_clutch_engaged_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      damping_rate_zero_throttle_clutch_disengaged_ = from.damping_rate_zero_throttle_clutch_disengaged_;
    }
    if (cached_has_bits & 0x00000200u) {
      use_gear_autobox_ = from.use_gear_autobox_;
    }
    if (cached_has_bits & 0x00000400u) {
      gear_switch_time_ = from.gear_switch_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      clutch_strength_ = from.clutch_strength_;
    }
    if (cached_has_bits & 0x00001000u) {
      final_ratio_ = from.final_ratio_;
    }
    if (cached_has_bits & 0x00002000u) {
      mass_ = from.mass_;
    }
    if (cached_has_bits & 0x00004000u) {
      drag_coefficient_ = from.drag_coefficient_;
    }
    if (cached_has_bits & 0x00008000u) {
      wheelbase_ = from.wheelbase_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EgoVehicleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.shenlan.mpc.EgoVehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgoVehicleInfo::CopyFrom(const EgoVehicleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.shenlan.mpc.EgoVehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EgoVehicleInfo::IsInitialized() const {
  return true;
}

void EgoVehicleInfo::InternalSwap(EgoVehicleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rolename_.Swap(&other->rolename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(center_of_mass_, other->center_of_mass_);
  swap(id_, other->id_);
  swap(max_rpm_, other->max_rpm_);
  swap(moi_, other->moi_);
  swap(damping_rate_full_throttle_, other->damping_rate_full_throttle_);
  swap(damping_rate_zero_throttle_clutch_engaged_, other->damping_rate_zero_throttle_clutch_engaged_);
  swap(damping_rate_zero_throttle_clutch_disengaged_, other->damping_rate_zero_throttle_clutch_disengaged_);
  swap(use_gear_autobox_, other->use_gear_autobox_);
  swap(gear_switch_time_, other->gear_switch_time_);
  swap(clutch_strength_, other->clutch_strength_);
  swap(final_ratio_, other->final_ratio_);
  swap(mass_, other->mass_);
  swap(drag_coefficient_, other->drag_coefficient_);
  swap(wheelbase_, other->wheelbase_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EgoVehicleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mpc
}  // namespace shenlan
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::shenlan::mpc::EgoVehicleInfo* Arena::CreateMaybeMessage< ::apollo::shenlan::mpc::EgoVehicleInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::shenlan::mpc::EgoVehicleInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
