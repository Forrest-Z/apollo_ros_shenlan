// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SingleMinco.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SingleMinco_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SingleMinco_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SingleMinco_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SingleMinco_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SingleMinco_2eproto;
namespace apollo {
namespace shenlan {
namespace mpc {
class SingleMinco;
class SingleMincoDefaultTypeInternal;
extern SingleMincoDefaultTypeInternal _SingleMinco_default_instance_;
}  // namespace mpc
}  // namespace shenlan
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::shenlan::mpc::SingleMinco* Arena::CreateMaybeMessage<::apollo::shenlan::mpc::SingleMinco>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace shenlan {
namespace mpc {

// ===================================================================

class SingleMinco :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.shenlan.mpc.SingleMinco) */ {
 public:
  SingleMinco();
  virtual ~SingleMinco();

  SingleMinco(const SingleMinco& from);
  SingleMinco(SingleMinco&& from) noexcept
    : SingleMinco() {
    *this = ::std::move(from);
  }

  inline SingleMinco& operator=(const SingleMinco& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleMinco& operator=(SingleMinco&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleMinco& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleMinco* internal_default_instance() {
    return reinterpret_cast<const SingleMinco*>(
               &_SingleMinco_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SingleMinco& a, SingleMinco& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleMinco* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleMinco* New() const final {
    return CreateMaybeMessage<SingleMinco>(nullptr);
  }

  SingleMinco* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleMinco>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleMinco& from);
  void MergeFrom(const SingleMinco& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleMinco* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.shenlan.mpc.SingleMinco";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SingleMinco_2eproto);
    return ::descriptor_table_SingleMinco_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosPtsFieldNumber = 6,
    kTPtsFieldNumber = 7,
    kHeadXFieldNumber = 2,
    kHeadYFieldNumber = 3,
    kTailXFieldNumber = 4,
    kTailYFieldNumber = 5,
    kStartTimeFieldNumber = 1,
    kReverseFieldNumber = 8,
  };
  // repeated .apollo.common.Point3D pos_pts = 6;
  int pos_pts_size() const;
  private:
  int _internal_pos_pts_size() const;
  public:
  void clear_pos_pts();
  ::apollo::common::Point3D* mutable_pos_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >*
      mutable_pos_pts();
  private:
  const ::apollo::common::Point3D& _internal_pos_pts(int index) const;
  ::apollo::common::Point3D* _internal_add_pos_pts();
  public:
  const ::apollo::common::Point3D& pos_pts(int index) const;
  ::apollo::common::Point3D* add_pos_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >&
      pos_pts() const;

  // repeated double t_pts = 7;
  int t_pts_size() const;
  private:
  int _internal_t_pts_size() const;
  public:
  void clear_t_pts();
  private:
  double _internal_t_pts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_t_pts() const;
  void _internal_add_t_pts(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_t_pts();
  public:
  double t_pts(int index) const;
  void set_t_pts(int index, double value);
  void add_t_pts(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      t_pts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_t_pts();

  // optional .apollo.common.Point3D head_x = 2;
  bool has_head_x() const;
  private:
  bool _internal_has_head_x() const;
  public:
  void clear_head_x();
  const ::apollo::common::Point3D& head_x() const;
  ::apollo::common::Point3D* release_head_x();
  ::apollo::common::Point3D* mutable_head_x();
  void set_allocated_head_x(::apollo::common::Point3D* head_x);
  private:
  const ::apollo::common::Point3D& _internal_head_x() const;
  ::apollo::common::Point3D* _internal_mutable_head_x();
  public:

  // optional .apollo.common.Point3D head_y = 3;
  bool has_head_y() const;
  private:
  bool _internal_has_head_y() const;
  public:
  void clear_head_y();
  const ::apollo::common::Point3D& head_y() const;
  ::apollo::common::Point3D* release_head_y();
  ::apollo::common::Point3D* mutable_head_y();
  void set_allocated_head_y(::apollo::common::Point3D* head_y);
  private:
  const ::apollo::common::Point3D& _internal_head_y() const;
  ::apollo::common::Point3D* _internal_mutable_head_y();
  public:

  // optional .apollo.common.Point3D tail_x = 4;
  bool has_tail_x() const;
  private:
  bool _internal_has_tail_x() const;
  public:
  void clear_tail_x();
  const ::apollo::common::Point3D& tail_x() const;
  ::apollo::common::Point3D* release_tail_x();
  ::apollo::common::Point3D* mutable_tail_x();
  void set_allocated_tail_x(::apollo::common::Point3D* tail_x);
  private:
  const ::apollo::common::Point3D& _internal_tail_x() const;
  ::apollo::common::Point3D* _internal_mutable_tail_x();
  public:

  // optional .apollo.common.Point3D tail_y = 5;
  bool has_tail_y() const;
  private:
  bool _internal_has_tail_y() const;
  public:
  void clear_tail_y();
  const ::apollo::common::Point3D& tail_y() const;
  ::apollo::common::Point3D* release_tail_y();
  ::apollo::common::Point3D* mutable_tail_y();
  void set_allocated_tail_y(::apollo::common::Point3D* tail_y);
  private:
  const ::apollo::common::Point3D& _internal_tail_y() const;
  ::apollo::common::Point3D* _internal_mutable_tail_y();
  public:

  // optional double start_time = 1;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // optional bool reverse = 8;
  bool has_reverse() const;
  private:
  bool _internal_has_reverse() const;
  public:
  void clear_reverse();
  bool reverse() const;
  void set_reverse(bool value);
  private:
  bool _internal_reverse() const;
  void _internal_set_reverse(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.shenlan.mpc.SingleMinco)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D > pos_pts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > t_pts_;
  ::apollo::common::Point3D* head_x_;
  ::apollo::common::Point3D* head_y_;
  ::apollo::common::Point3D* tail_x_;
  ::apollo::common::Point3D* tail_y_;
  double start_time_;
  bool reverse_;
  friend struct ::TableStruct_SingleMinco_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SingleMinco

// optional double start_time = 1;
inline bool SingleMinco::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SingleMinco::has_start_time() const {
  return _internal_has_start_time();
}
inline void SingleMinco::clear_start_time() {
  start_time_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SingleMinco::_internal_start_time() const {
  return start_time_;
}
inline double SingleMinco::start_time() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.SingleMinco.start_time)
  return _internal_start_time();
}
inline void SingleMinco::_internal_set_start_time(double value) {
  _has_bits_[0] |= 0x00000010u;
  start_time_ = value;
}
inline void SingleMinco::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.SingleMinco.start_time)
}

// optional .apollo.common.Point3D head_x = 2;
inline bool SingleMinco::_internal_has_head_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || head_x_ != nullptr);
  return value;
}
inline bool SingleMinco::has_head_x() const {
  return _internal_has_head_x();
}
inline const ::apollo::common::Point3D& SingleMinco::_internal_head_x() const {
  const ::apollo::common::Point3D* p = head_x_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& SingleMinco::head_x() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.SingleMinco.head_x)
  return _internal_head_x();
}
inline ::apollo::common::Point3D* SingleMinco::release_head_x() {
  // @@protoc_insertion_point(field_release:apollo.shenlan.mpc.SingleMinco.head_x)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Point3D* temp = head_x_;
  head_x_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* SingleMinco::_internal_mutable_head_x() {
  _has_bits_[0] |= 0x00000001u;
  if (head_x_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    head_x_ = p;
  }
  return head_x_;
}
inline ::apollo::common::Point3D* SingleMinco::mutable_head_x() {
  // @@protoc_insertion_point(field_mutable:apollo.shenlan.mpc.SingleMinco.head_x)
  return _internal_mutable_head_x();
}
inline void SingleMinco::set_allocated_head_x(::apollo::common::Point3D* head_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_x_);
  }
  if (head_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      head_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head_x, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  head_x_ = head_x;
  // @@protoc_insertion_point(field_set_allocated:apollo.shenlan.mpc.SingleMinco.head_x)
}

// optional .apollo.common.Point3D head_y = 3;
inline bool SingleMinco::_internal_has_head_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || head_y_ != nullptr);
  return value;
}
inline bool SingleMinco::has_head_y() const {
  return _internal_has_head_y();
}
inline const ::apollo::common::Point3D& SingleMinco::_internal_head_y() const {
  const ::apollo::common::Point3D* p = head_y_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& SingleMinco::head_y() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.SingleMinco.head_y)
  return _internal_head_y();
}
inline ::apollo::common::Point3D* SingleMinco::release_head_y() {
  // @@protoc_insertion_point(field_release:apollo.shenlan.mpc.SingleMinco.head_y)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Point3D* temp = head_y_;
  head_y_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* SingleMinco::_internal_mutable_head_y() {
  _has_bits_[0] |= 0x00000002u;
  if (head_y_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    head_y_ = p;
  }
  return head_y_;
}
inline ::apollo::common::Point3D* SingleMinco::mutable_head_y() {
  // @@protoc_insertion_point(field_mutable:apollo.shenlan.mpc.SingleMinco.head_y)
  return _internal_mutable_head_y();
}
inline void SingleMinco::set_allocated_head_y(::apollo::common::Point3D* head_y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_y_);
  }
  if (head_y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      head_y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head_y, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  head_y_ = head_y;
  // @@protoc_insertion_point(field_set_allocated:apollo.shenlan.mpc.SingleMinco.head_y)
}

// optional .apollo.common.Point3D tail_x = 4;
inline bool SingleMinco::_internal_has_tail_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tail_x_ != nullptr);
  return value;
}
inline bool SingleMinco::has_tail_x() const {
  return _internal_has_tail_x();
}
inline const ::apollo::common::Point3D& SingleMinco::_internal_tail_x() const {
  const ::apollo::common::Point3D* p = tail_x_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& SingleMinco::tail_x() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.SingleMinco.tail_x)
  return _internal_tail_x();
}
inline ::apollo::common::Point3D* SingleMinco::release_tail_x() {
  // @@protoc_insertion_point(field_release:apollo.shenlan.mpc.SingleMinco.tail_x)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = tail_x_;
  tail_x_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* SingleMinco::_internal_mutable_tail_x() {
  _has_bits_[0] |= 0x00000004u;
  if (tail_x_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    tail_x_ = p;
  }
  return tail_x_;
}
inline ::apollo::common::Point3D* SingleMinco::mutable_tail_x() {
  // @@protoc_insertion_point(field_mutable:apollo.shenlan.mpc.SingleMinco.tail_x)
  return _internal_mutable_tail_x();
}
inline void SingleMinco::set_allocated_tail_x(::apollo::common::Point3D* tail_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tail_x_);
  }
  if (tail_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tail_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tail_x, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tail_x_ = tail_x;
  // @@protoc_insertion_point(field_set_allocated:apollo.shenlan.mpc.SingleMinco.tail_x)
}

// optional .apollo.common.Point3D tail_y = 5;
inline bool SingleMinco::_internal_has_tail_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tail_y_ != nullptr);
  return value;
}
inline bool SingleMinco::has_tail_y() const {
  return _internal_has_tail_y();
}
inline const ::apollo::common::Point3D& SingleMinco::_internal_tail_y() const {
  const ::apollo::common::Point3D* p = tail_y_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& SingleMinco::tail_y() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.SingleMinco.tail_y)
  return _internal_tail_y();
}
inline ::apollo::common::Point3D* SingleMinco::release_tail_y() {
  // @@protoc_insertion_point(field_release:apollo.shenlan.mpc.SingleMinco.tail_y)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::common::Point3D* temp = tail_y_;
  tail_y_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* SingleMinco::_internal_mutable_tail_y() {
  _has_bits_[0] |= 0x00000008u;
  if (tail_y_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    tail_y_ = p;
  }
  return tail_y_;
}
inline ::apollo::common::Point3D* SingleMinco::mutable_tail_y() {
  // @@protoc_insertion_point(field_mutable:apollo.shenlan.mpc.SingleMinco.tail_y)
  return _internal_mutable_tail_y();
}
inline void SingleMinco::set_allocated_tail_y(::apollo::common::Point3D* tail_y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tail_y_);
  }
  if (tail_y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tail_y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tail_y, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tail_y_ = tail_y;
  // @@protoc_insertion_point(field_set_allocated:apollo.shenlan.mpc.SingleMinco.tail_y)
}

// repeated .apollo.common.Point3D pos_pts = 6;
inline int SingleMinco::_internal_pos_pts_size() const {
  return pos_pts_.size();
}
inline int SingleMinco::pos_pts_size() const {
  return _internal_pos_pts_size();
}
inline ::apollo::common::Point3D* SingleMinco::mutable_pos_pts(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.shenlan.mpc.SingleMinco.pos_pts)
  return pos_pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >*
SingleMinco::mutable_pos_pts() {
  // @@protoc_insertion_point(field_mutable_list:apollo.shenlan.mpc.SingleMinco.pos_pts)
  return &pos_pts_;
}
inline const ::apollo::common::Point3D& SingleMinco::_internal_pos_pts(int index) const {
  return pos_pts_.Get(index);
}
inline const ::apollo::common::Point3D& SingleMinco::pos_pts(int index) const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.SingleMinco.pos_pts)
  return _internal_pos_pts(index);
}
inline ::apollo::common::Point3D* SingleMinco::_internal_add_pos_pts() {
  return pos_pts_.Add();
}
inline ::apollo::common::Point3D* SingleMinco::add_pos_pts() {
  // @@protoc_insertion_point(field_add:apollo.shenlan.mpc.SingleMinco.pos_pts)
  return _internal_add_pos_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >&
SingleMinco::pos_pts() const {
  // @@protoc_insertion_point(field_list:apollo.shenlan.mpc.SingleMinco.pos_pts)
  return pos_pts_;
}

// repeated double t_pts = 7;
inline int SingleMinco::_internal_t_pts_size() const {
  return t_pts_.size();
}
inline int SingleMinco::t_pts_size() const {
  return _internal_t_pts_size();
}
inline void SingleMinco::clear_t_pts() {
  t_pts_.Clear();
}
inline double SingleMinco::_internal_t_pts(int index) const {
  return t_pts_.Get(index);
}
inline double SingleMinco::t_pts(int index) const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.SingleMinco.t_pts)
  return _internal_t_pts(index);
}
inline void SingleMinco::set_t_pts(int index, double value) {
  t_pts_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.SingleMinco.t_pts)
}
inline void SingleMinco::_internal_add_t_pts(double value) {
  t_pts_.Add(value);
}
inline void SingleMinco::add_t_pts(double value) {
  _internal_add_t_pts(value);
  // @@protoc_insertion_point(field_add:apollo.shenlan.mpc.SingleMinco.t_pts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SingleMinco::_internal_t_pts() const {
  return t_pts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SingleMinco::t_pts() const {
  // @@protoc_insertion_point(field_list:apollo.shenlan.mpc.SingleMinco.t_pts)
  return _internal_t_pts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SingleMinco::_internal_mutable_t_pts() {
  return &t_pts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SingleMinco::mutable_t_pts() {
  // @@protoc_insertion_point(field_mutable_list:apollo.shenlan.mpc.SingleMinco.t_pts)
  return _internal_mutable_t_pts();
}

// optional bool reverse = 8;
inline bool SingleMinco::_internal_has_reverse() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SingleMinco::has_reverse() const {
  return _internal_has_reverse();
}
inline void SingleMinco::clear_reverse() {
  reverse_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool SingleMinco::_internal_reverse() const {
  return reverse_;
}
inline bool SingleMinco::reverse() const {
  // @@protoc_insertion_point(field_get:apollo.shenlan.mpc.SingleMinco.reverse)
  return _internal_reverse();
}
inline void SingleMinco::_internal_set_reverse(bool value) {
  _has_bits_[0] |= 0x00000020u;
  reverse_ = value;
}
inline void SingleMinco::set_reverse(bool value) {
  _internal_set_reverse(value);
  // @@protoc_insertion_point(field_set:apollo.shenlan.mpc.SingleMinco.reverse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mpc
}  // namespace shenlan
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SingleMinco_2eproto
